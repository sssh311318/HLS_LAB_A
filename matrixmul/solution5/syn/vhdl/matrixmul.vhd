-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    a_empty_n : IN STD_LOGIC;
    a_read : OUT STD_LOGIC;
    b_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    b_empty_n : IN STD_LOGIC;
    b_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=13.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.424000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=157,HLS_SYN_LUT=218,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln7_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln54_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_295_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal icmp_ln54_reg_295_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal a_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal b_blk_n : STD_LOGIC;
    signal res_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_295_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_295_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_295_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_fu_183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_9_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_reg_308 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_reg_308_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_reg_318 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_323 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_323_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_1_fu_251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_257_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_100_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_66 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_fu_157_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_j_load_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln54_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_74 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln56_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_151_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_257_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_345 : BOOLEAN;
    signal ap_condition_176 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_reg_323_pp0_iter3_reg,
        din1 => tmp5_reg_308_pp0_iter3_reg,
        dout => mul_ln60_1_fu_251_p2);

    mac_muladd_8s_8s_16s_16_4_1_U2 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_fu_225_p4,
        din1 => tmp_s_fu_197_p4,
        din2 => mul_ln60_1_fu_251_p2,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U3 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln60_reg_318,
        din1 => empty_9_reg_303,
        din2 => grp_fu_257_p3,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p3);

    flow_control_loop_pipe_U : component matrixmul_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_176)) then
                if ((icmp_ln54_fu_121_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_70 <= add_ln54_fu_127_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_176)) then
                if ((icmp_ln54_fu_121_p2 = ap_const_lv1_0)) then 
                    j_fu_66 <= select_ln56_fu_157_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_66 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln54_reg_295 <= icmp_ln54_fu_121_p2;
                icmp_ln54_reg_295_pp0_iter1_reg <= icmp_ln54_reg_295;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln54_reg_295_pp0_iter2_reg <= icmp_ln54_reg_295_pp0_iter1_reg;
                icmp_ln54_reg_295_pp0_iter3_reg <= icmp_ln54_reg_295_pp0_iter2_reg;
                icmp_ln54_reg_295_pp0_iter4_reg <= icmp_ln54_reg_295_pp0_iter3_reg;
                icmp_ln54_reg_295_pp0_iter5_reg <= icmp_ln54_reg_295_pp0_iter4_reg;
                tmp5_reg_308_pp0_iter3_reg <= tmp5_reg_308;
                tmp_1_reg_323_pp0_iter3_reg <= tmp_1_reg_323;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0))) then
                empty_9_reg_303 <= empty_9_fu_183_p1;
                tmp5_reg_308 <= empty_fu_74(15 downto 8);
                tmp_1_reg_323 <= b_dout(15 downto 8);
                trunc_ln60_reg_318 <= trunc_ln60_fu_211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln7_reg_299 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_fu_74 <= a_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln7_reg_299 <= or_ln7_fu_142_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    a_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, a_empty_n, or_ln7_reg_299, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln7_reg_299 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_blk_n <= a_empty_n;
        else 
            a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln7_reg_299, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln7_reg_299 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_read <= ap_const_logic_1;
        else 
            a_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln56_fu_151_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, a_empty_n, or_ln7_reg_299, b_empty_n, icmp_ln54_reg_295_pp0_iter1_reg, res_full_n, icmp_ln54_reg_295_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (res_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (b_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_ln7_reg_299 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, a_empty_n, or_ln7_reg_299, b_empty_n, icmp_ln54_reg_295_pp0_iter1_reg, res_full_n, icmp_ln54_reg_295_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (res_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (b_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_ln7_reg_299 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6, a_empty_n, or_ln7_reg_299, b_empty_n, icmp_ln54_reg_295_pp0_iter1_reg, res_full_n, icmp_ln54_reg_295_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (res_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (b_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_ln7_reg_299 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(a_empty_n, or_ln7_reg_299)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((or_ln7_reg_299 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(b_empty_n, icmp_ln54_reg_295_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (b_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(res_full_n, icmp_ln54_reg_295_pp0_iter5_reg)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (res_full_n = ap_const_logic_0));
    end process;


    ap_condition_176_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_176 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_345_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln54_reg_295, ap_block_pp0_stage0)
    begin
                ap_condition_345 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln54_reg_295 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln54_fu_121_p2)
    begin
        if (((icmp_ln54_fu_121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_0_phi_fu_100_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_345)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_345)) then 
                ap_phi_mux_first_iter_0_phi_fu_100_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_0_phi_fu_100_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_0_phi_fu_100_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_0_phi_fu_100_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, j_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, j_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load_1 <= j_fu_66;
        end if; 
    end process;


    b_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, b_empty_n, icmp_ln54_reg_295_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_blk_n <= b_empty_n;
        else 
            b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln54_reg_295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_295_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_read <= ap_const_logic_1;
        else 
            b_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_9_fu_183_p1 <= empty_fu_74(8 - 1 downto 0);

    grp_fu_257_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_257_ce <= ap_const_logic_1;
        else 
            grp_fu_257_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln54_fu_121_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_9) else "0";
    icmp_ln56_fu_136_p2 <= "1" when (ap_sig_allocacmp_j_load_1 = ap_const_lv2_3) else "0";
    or_ln7_fu_142_p2 <= (icmp_ln56_fu_136_p2 or ap_phi_mux_first_iter_0_phi_fu_100_p4);

    res_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, res_full_n, icmp_ln54_reg_295_pp0_iter5_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_blk_n <= res_full_n;
        else 
            res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_din <= grp_fu_265_p3;

    res_write_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln54_reg_295_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_295_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln56_fu_157_p3 <= 
        ap_const_lv2_1 when (icmp_ln56_fu_136_p2(0) = '1') else 
        add_ln56_fu_151_p2;
    tmp_2_fu_225_p4 <= b_dout(23 downto 16);
    tmp_s_fu_197_p4 <= empty_fu_74(23 downto 16);
    trunc_ln60_fu_211_p1 <= b_dout(8 - 1 downto 0);
end behav;
