-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    a_empty_n : IN STD_LOGIC;
    a_read : OUT STD_LOGIC;
    b_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    b_empty_n : IN STD_LOGIC;
    b_read : OUT STD_LOGIC;
    res_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_full_n : IN STD_LOGIC;
    res_write : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=13.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.862000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=375,HLS_SYN_LUT=477,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln63_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal icmp_ln70_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_1_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal b_blk_n : STD_LOGIC;
    signal res_blk_n : STD_LOGIC;
    signal add_ln6310_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln659_reg_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp148_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal j4_reg_218 : STD_LOGIC_VECTOR (1 downto 0);
    signal i3_reg_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten2_reg_246 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_274_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_478 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln63_1_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln63_1_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_copy_addr_reg_491 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_addr_reg_491_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_addr_reg_491_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_1_addr_reg_496 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_1_addr_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_2_addr_reg_501 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_375_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_509 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp14_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp14_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_fu_393_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln63_reg_524 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln63_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_529_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_529_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_529_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_529_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal a_row_load_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_1_load_reg_538 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_1_load_reg_538_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_2_load_reg_543 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_2_load_reg_543_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_2_load_reg_543_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln82_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal b_copy_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_ce0 : STD_LOGIC;
    signal b_copy_we0 : STD_LOGIC;
    signal b_copy_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_ce1 : STD_LOGIC;
    signal b_copy_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_1_ce0 : STD_LOGIC;
    signal b_copy_1_we0 : STD_LOGIC;
    signal b_copy_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_1_ce1 : STD_LOGIC;
    signal b_copy_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_copy_2_ce0 : STD_LOGIC;
    signal b_copy_2_we0 : STD_LOGIC;
    signal b_copy_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_copy_2_ce1 : STD_LOGIC;
    signal b_copy_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_add_ln6310_phi_fu_180_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_icmp_ln659_phi_fu_194_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_cmp148_phi_fu_208_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_j4_phi_fu_222_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i3_phi_fu_236_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten2_phi_fu_250_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_row_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_1_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_2_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_row_3_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_451_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln58_fu_260_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp14_mid1_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_451_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_221 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_b_copy_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    b_copy_U : component matrixmul_b_copy_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_address0,
        ce0 => b_copy_ce0,
        we0 => b_copy_we0,
        d0 => b_copy_d0,
        address1 => b_copy_addr_reg_491_pp0_iter2_reg,
        ce1 => b_copy_ce1,
        q1 => b_copy_q1);

    b_copy_1_U : component matrixmul_b_copy_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_1_address0,
        ce0 => b_copy_1_ce0,
        we0 => b_copy_1_we0,
        d0 => b_copy_1_d0,
        address1 => b_copy_1_addr_reg_496_pp0_iter1_reg,
        ce1 => b_copy_1_ce1,
        q1 => b_copy_1_q1);

    b_copy_2_U : component matrixmul_b_copy_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_copy_2_address0,
        ce0 => b_copy_2_ce0,
        we0 => b_copy_2_we0,
        d0 => b_copy_2_d0,
        address1 => b_copy_2_addr_reg_501,
        ce1 => b_copy_2_ce1,
        q1 => b_copy_2_q1);

    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_copy_q1,
        din1 => a_row_2_load_reg_543_pp0_iter3_reg,
        dout => mul_ln82_fu_435_p2);

    mac_muladd_8s_8s_16s_16_4_1_U2 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_copy_2_q1,
        din1 => a_row_load_reg_533,
        din2 => mul_ln82_fu_435_p2,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U3 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_copy_1_q1,
        din1 => a_row_1_load_reg_538_pp0_iter2_reg,
        din2 => grp_fu_443_p3,
        ce => grp_fu_451_ce,
        dout => grp_fu_451_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_ln6310_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                add_ln6310_reg_176 <= add_ln63_reg_524;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                add_ln6310_reg_176 <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    cmp148_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                cmp148_reg_204 <= cmp14_reg_514;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                cmp148_reg_204 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                i3_reg_232 <= i_reg_478;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i3_reg_232 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    icmp_ln659_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                icmp_ln659_reg_190 <= icmp_ln65_reg_519;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                icmp_ln659_reg_190 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_246 <= add_ln63_1_reg_486;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten2_reg_246 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j4_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_0))) then 
                j4_reg_218 <= j_reg_509;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_529 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                j4_reg_218 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_row_1_fu_74 <= a_dout(15 downto 8);
                a_row_2_fu_78 <= a_row_3_fu_301_p1;
                a_row_fu_70 <= a_dout(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_row_1_load_reg_538 <= a_row_1_fu_74;
                a_row_2_load_reg_543 <= a_row_2_fu_78;
                a_row_load_reg_533 <= a_row_fu_70;
                b_copy_1_addr_reg_496 <= zext_ln65_fu_282_p1(2 - 1 downto 0);
                b_copy_1_addr_reg_496_pp0_iter1_reg <= b_copy_1_addr_reg_496;
                b_copy_2_addr_reg_501 <= zext_ln65_fu_282_p1(2 - 1 downto 0);
                b_copy_addr_reg_491 <= zext_ln65_fu_282_p1(2 - 1 downto 0);
                b_copy_addr_reg_491_pp0_iter1_reg <= b_copy_addr_reg_491;
                icmp_ln63_reg_529 <= icmp_ln63_fu_399_p2;
                icmp_ln63_reg_529_pp0_iter1_reg <= icmp_ln63_reg_529;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_row_1_load_reg_538_pp0_iter2_reg <= a_row_1_load_reg_538;
                a_row_2_load_reg_543_pp0_iter2_reg <= a_row_2_load_reg_543;
                a_row_2_load_reg_543_pp0_iter3_reg <= a_row_2_load_reg_543_pp0_iter2_reg;
                b_copy_addr_reg_491_pp0_iter2_reg <= b_copy_addr_reg_491_pp0_iter1_reg;
                icmp_ln63_reg_529_pp0_iter2_reg <= icmp_ln63_reg_529_pp0_iter1_reg;
                icmp_ln63_reg_529_pp0_iter3_reg <= icmp_ln63_reg_529_pp0_iter2_reg;
                icmp_ln63_reg_529_pp0_iter4_reg <= icmp_ln63_reg_529_pp0_iter3_reg;
                icmp_ln63_reg_529_pp0_iter5_reg <= icmp_ln63_reg_529_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln63_1_reg_486 <= add_ln63_1_fu_295_p2;
                add_ln63_reg_524 <= add_ln63_fu_393_p2;
                cmp14_reg_514 <= cmp14_fu_381_p2;
                i_reg_478 <= i_fu_274_p3;
                icmp_ln65_reg_519 <= icmp_ln65_fu_387_p2;
                j_reg_509 <= j_fu_375_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    a_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, a_empty_n, icmp_ln70_fu_289_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_blk_n <= a_empty_n;
        else 
            a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    a_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, icmp_ln70_fu_289_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_read <= ap_const_logic_1;
        else 
            a_read <= ap_const_logic_0;
        end if; 
    end process;

    a_row_3_fu_301_p1 <= a_dout(8 - 1 downto 0);
    add_ln63_1_fu_295_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten2_phi_fu_250_p6) + unsigned(ap_const_lv4_1));
    add_ln63_fu_393_p2 <= std_logic_vector(unsigned(i_fu_274_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, a_empty_n, icmp_ln70_fu_289_p2, b_empty_n, select_ln58_1_fu_340_p3, res_full_n, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (res_full_n = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and (((select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (b_empty_n = ap_const_logic_0)) or ((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, a_empty_n, icmp_ln70_fu_289_p2, b_empty_n, select_ln58_1_fu_340_p3, res_full_n, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (res_full_n = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and (((select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (b_empty_n = ap_const_logic_0)) or ((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, a_empty_n, icmp_ln70_fu_289_p2, b_empty_n, select_ln58_1_fu_340_p3, res_full_n, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (res_full_n = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and (((select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (b_empty_n = ap_const_logic_0)) or ((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(a_empty_n, icmp_ln70_fu_289_p2, b_empty_n, select_ln58_1_fu_340_p3)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (b_empty_n = ap_const_logic_0)) or ((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_empty_n)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter6_assign_proc : process(res_full_n)
    begin
                ap_block_state8_pp0_stage0_iter6 <= (res_full_n = ap_const_logic_0);
    end process;


    ap_condition_221_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_221 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, icmp_ln63_reg_529_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln63_reg_529_pp0_iter5_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_ln6310_phi_fu_180_p6_assign_proc : process(add_ln6310_reg_176, add_ln63_reg_524, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_add_ln6310_phi_fu_180_p6 <= ap_const_lv2_1;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_add_ln6310_phi_fu_180_p6 <= add_ln63_reg_524;
            else 
                ap_phi_mux_add_ln6310_phi_fu_180_p6 <= add_ln6310_reg_176;
            end if;
        else 
            ap_phi_mux_add_ln6310_phi_fu_180_p6 <= add_ln6310_reg_176;
        end if; 
    end process;


    ap_phi_mux_cmp148_phi_fu_208_p6_assign_proc : process(cmp148_reg_204, cmp14_reg_514, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_cmp148_phi_fu_208_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_cmp148_phi_fu_208_p6 <= cmp14_reg_514;
            else 
                ap_phi_mux_cmp148_phi_fu_208_p6 <= cmp148_reg_204;
            end if;
        else 
            ap_phi_mux_cmp148_phi_fu_208_p6 <= cmp148_reg_204;
        end if; 
    end process;


    ap_phi_mux_i3_phi_fu_236_p6_assign_proc : process(i3_reg_232, i_reg_478, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_i3_phi_fu_236_p6 <= ap_const_lv2_0;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_i3_phi_fu_236_p6 <= i_reg_478;
            else 
                ap_phi_mux_i3_phi_fu_236_p6 <= i3_reg_232;
            end if;
        else 
            ap_phi_mux_i3_phi_fu_236_p6 <= i3_reg_232;
        end if; 
    end process;


    ap_phi_mux_icmp_ln659_phi_fu_194_p6_assign_proc : process(icmp_ln659_reg_190, icmp_ln65_reg_519, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_icmp_ln659_phi_fu_194_p6 <= ap_const_lv1_0;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_icmp_ln659_phi_fu_194_p6 <= icmp_ln65_reg_519;
            else 
                ap_phi_mux_icmp_ln659_phi_fu_194_p6 <= icmp_ln659_reg_190;
            end if;
        else 
            ap_phi_mux_icmp_ln659_phi_fu_194_p6 <= icmp_ln659_reg_190;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_250_p6_assign_proc : process(indvar_flatten2_reg_246, add_ln63_1_reg_486, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_250_p6 <= ap_const_lv4_0;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_250_p6 <= add_ln63_1_reg_486;
            else 
                ap_phi_mux_indvar_flatten2_phi_fu_250_p6 <= indvar_flatten2_reg_246;
            end if;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_250_p6 <= indvar_flatten2_reg_246;
        end if; 
    end process;


    ap_phi_mux_j4_phi_fu_222_p6_assign_proc : process(j4_reg_218, j_reg_509, icmp_ln63_reg_529, ap_condition_221)
    begin
        if ((ap_const_boolean_1 = ap_condition_221)) then
            if ((icmp_ln63_reg_529 = ap_const_lv1_1)) then 
                ap_phi_mux_j4_phi_fu_222_p6 <= ap_const_lv2_0;
            elsif ((icmp_ln63_reg_529 = ap_const_lv1_0)) then 
                ap_phi_mux_j4_phi_fu_222_p6 <= j_reg_509;
            else 
                ap_phi_mux_j4_phi_fu_222_p6 <= j4_reg_218;
            end if;
        else 
            ap_phi_mux_j4_phi_fu_222_p6 <= j4_reg_218;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, icmp_ln63_fu_399_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (icmp_ln63_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    b_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, b_empty_n, select_ln58_1_fu_340_p3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_blk_n <= b_empty_n;
        else 
            b_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_copy_1_address0 <= zext_ln65_fu_282_p1(2 - 1 downto 0);

    b_copy_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_1_ce0 <= ap_const_logic_1;
        else 
            b_copy_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_copy_1_ce1 <= ap_const_logic_1;
        else 
            b_copy_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_1_d0 <= b_dout(15 downto 8);

    b_copy_1_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, select_ln58_1_fu_340_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_1_we0 <= ap_const_logic_1;
        else 
            b_copy_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_2_address0 <= zext_ln65_fu_282_p1(2 - 1 downto 0);

    b_copy_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_2_ce0 <= ap_const_logic_1;
        else 
            b_copy_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            b_copy_2_ce1 <= ap_const_logic_1;
        else 
            b_copy_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_2_d0 <= b_dout(23 downto 16);

    b_copy_2_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, select_ln58_1_fu_340_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_2_we0 <= ap_const_logic_1;
        else 
            b_copy_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_address0 <= zext_ln65_fu_282_p1(2 - 1 downto 0);

    b_copy_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_ce0 <= ap_const_logic_1;
        else 
            b_copy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_copy_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            b_copy_ce1 <= ap_const_logic_1;
        else 
            b_copy_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_copy_d0 <= b_dout(8 - 1 downto 0);

    b_copy_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, select_ln58_1_fu_340_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_copy_we0 <= ap_const_logic_1;
        else 
            b_copy_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, select_ln58_1_fu_340_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln58_1_fu_340_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_read <= ap_const_logic_1;
        else 
            b_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp14_fu_381_p2 <= "1" when (i_fu_274_p3 = ap_const_lv2_0) else "0";
    cmp14_mid1_fu_268_p2 <= "1" when (ap_phi_mux_add_ln6310_phi_fu_180_p6 = ap_const_lv2_0) else "0";

    grp_fu_443_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_451_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_451_ce <= ap_const_logic_1;
        else 
            grp_fu_451_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_274_p3 <= 
        ap_phi_mux_add_ln6310_phi_fu_180_p6 when (ap_phi_mux_icmp_ln659_phi_fu_194_p6(0) = '1') else 
        ap_phi_mux_i3_phi_fu_236_p6;
    icmp_ln63_fu_399_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_250_p6 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_387_p2 <= "1" when (j_fu_375_p2 = ap_const_lv2_3) else "0";
    icmp_ln70_fu_289_p2 <= "1" when (select_ln58_fu_260_p3 = ap_const_lv2_0) else "0";
    j_fu_375_p2 <= std_logic_vector(unsigned(select_ln58_fu_260_p3) + unsigned(ap_const_lv2_1));

    res_blk_n_assign_proc : process(res_full_n, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_blk_n <= res_full_n;
        else 
            res_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_din <= grp_fu_451_p3;

    res_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_write <= ap_const_logic_1;
        else 
            res_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln58_1_fu_340_p3 <= 
        cmp14_mid1_fu_268_p2 when (ap_phi_mux_icmp_ln659_phi_fu_194_p6(0) = '1') else 
        ap_phi_mux_cmp148_phi_fu_208_p6;
    select_ln58_fu_260_p3 <= 
        ap_const_lv2_0 when (ap_phi_mux_icmp_ln659_phi_fu_194_p6(0) = '1') else 
        ap_phi_mux_j4_phi_fu_222_p6;
    zext_ln65_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_fu_260_p3),64));
end behav;
