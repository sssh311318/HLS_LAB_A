-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=13.330000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.249000,HLS_SYN_LAT=10,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=632,HLS_SYN_LUT=581,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln60_fu_314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_reg_610 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sext_ln60_1_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_1_reg_615 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_fu_322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_1_load_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_4_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_4_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_5_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_5_reg_643 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_6_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_6_reg_650 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_3_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_3_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_load_1_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_8_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_8_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_1_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_14_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_14_reg_698 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_9_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_9_reg_710 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal mul_ln60_6_fu_382_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_6_reg_716 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_load_2_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_11_fu_387_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_11_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_12_fu_391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_12_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_9_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_9_reg_739 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_2_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_2_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_17_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_17_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_2_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal sext_ln60_3_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_3_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_7_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_7_reg_775 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_10_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_10_reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_12_fu_419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_15_fu_423_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_15_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_450_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_2_reg_804 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_13_fu_427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_6_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_471_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_8_reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_15_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_15_reg_826 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_18_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_16_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_16_reg_836 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_21_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_479_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_485_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_10_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_12_reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_498_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_14_reg_863 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_24_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_5_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_529_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_16_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_9_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_11_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_554_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_13_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_15_reg_898 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_17_reg_903 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_535_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_3_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_6_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_9_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_12_fu_419_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_12_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_15_fu_423_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_15_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_18_fu_433_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_18_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_21_fu_441_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_21_fu_441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_24_fu_446_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_24_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_471_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_479_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_485_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_491_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_498_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_521_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_529_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_535_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_548_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_548_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_560_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_560_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q1,
        din1 => mul_ln60_fu_322_p1,
        dout => mul_ln60_fu_322_p2);

    mul_8s_8s_16_1_1_U2 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q0,
        din1 => mul_ln60_3_fu_360_p1,
        dout => mul_ln60_3_fu_360_p2);

    mul_8s_8s_16_1_1_U3 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q0,
        din1 => mul_ln60_6_fu_382_p1,
        dout => mul_ln60_6_fu_382_p2);

    mul_8s_8s_16_1_1_U4 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln60_1_reg_688,
        din1 => mul_ln60_9_fu_394_p1,
        dout => mul_ln60_9_fu_394_p2);

    mul_8s_8s_16_1_1_U5 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln60_12_fu_419_p0,
        din1 => mul_ln60_12_fu_419_p1,
        dout => mul_ln60_12_fu_419_p2);

    mul_8s_8s_16_1_1_U6 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln60_15_fu_423_p0,
        din1 => mul_ln60_15_fu_423_p1,
        dout => mul_ln60_15_fu_423_p2);

    mul_8s_8s_16_1_1_U7 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln60_18_fu_433_p0,
        din1 => mul_ln60_18_fu_433_p1,
        dout => mul_ln60_18_fu_433_p2);

    mul_8s_8s_16_1_1_U8 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln60_21_fu_441_p0,
        din1 => mul_ln60_21_fu_441_p1,
        dout => mul_ln60_21_fu_441_p2);

    mul_8s_8s_16_1_1_U9 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln60_24_fu_446_p0,
        din1 => mul_ln60_24_fu_446_p1,
        dout => mul_ln60_24_fu_446_p2);

    mac_muladd_8s_8s_16s_16_4_1_U10 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_450_p0,
        din1 => grp_fu_450_p1,
        din2 => mul_ln60_reg_621,
        ce => ap_const_logic_1,
        dout => grp_fu_450_p3);

    mac_muladd_8s_8s_16s_16_4_1_U11 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        din2 => mul_ln60_3_reg_656,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p3);

    mac_muladd_8s_8s_16s_16_4_1_U12 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        din2 => mul_ln60_9_reg_739,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p3);

    mac_muladd_8s_8s_16s_16_4_1_U13 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_471_p0,
        din1 => grp_fu_471_p1,
        din2 => mul_ln60_12_fu_419_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p3);

    mac_muladd_8s_8s_16s_16_4_1_U14 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_479_p0,
        din1 => grp_fu_479_p1,
        din2 => mul_ln60_6_reg_716,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p3);

    mac_muladd_8s_8s_16s_16_4_1_U15 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_485_p0,
        din1 => grp_fu_485_p1,
        din2 => mul_ln60_15_reg_794,
        ce => ap_const_logic_1,
        dout => grp_fu_485_p3);

    mac_muladd_8s_8s_16s_16_4_1_U16 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_491_p0,
        din1 => grp_fu_491_p1,
        din2 => mul_ln60_18_fu_433_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p3);

    mac_muladd_8s_8s_16s_16_4_1_U17 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_498_p0,
        din1 => grp_fu_498_p1,
        din2 => mul_ln60_21_fu_441_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U18 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_load_reg_631,
        din1 => grp_fu_505_p1,
        din2 => add_ln60_reg_799,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U19 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_load_1_reg_661,
        din1 => grp_fu_513_p1,
        din2 => add_ln60_2_reg_804,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U20 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_load_2_reg_721,
        din1 => grp_fu_521_p1,
        din2 => grp_fu_479_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_521_p3);

    mac_muladd_8s_8s_16s_16_4_1_U21 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_529_p0,
        din1 => grp_fu_529_p1,
        din2 => mul_ln60_24_fu_446_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U22 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_535_p0,
        din1 => grp_fu_535_p1,
        din2 => add_ln60_6_reg_816,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U23 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        din2 => add_ln60_8_reg_821,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U24 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_548_p0,
        din1 => grp_fu_548_p1,
        din2 => add_ln60_10_reg_853,
        ce => ap_const_logic_1,
        dout => grp_fu_548_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U25 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_749,
        din1 => grp_fu_554_p1,
        din2 => add_ln60_12_reg_858,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U26 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_560_p0,
        din1 => grp_fu_560_p1,
        din2 => add_ln60_14_reg_863,
        ce => ap_const_logic_1,
        dout => grp_fu_560_p3);

    mac_muladd_8s_8s_16ns_16_4_1_U27 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        din2 => add_ln60_16_reg_878,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln60_10_reg_853 <= grp_fu_485_p3;
                add_ln60_12_reg_858 <= grp_fu_491_p3;
                add_ln60_14_reg_863 <= grp_fu_498_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln60_11_reg_888 <= grp_fu_548_p3;
                add_ln60_13_reg_893 <= grp_fu_554_p3;
                add_ln60_9_reg_883 <= grp_fu_542_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln60_15_reg_898 <= grp_fu_560_p3;
                add_ln60_17_reg_903 <= grp_fu_565_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln60_16_reg_878 <= grp_fu_529_p3;
                add_ln60_5_reg_873 <= grp_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln60_2_reg_804 <= grp_fu_457_p3;
                add_ln60_6_reg_816 <= grp_fu_464_p3;
                add_ln60_8_reg_821 <= grp_fu_471_p3;
                add_ln60_reg_799 <= grp_fu_450_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_1_load_1_reg_661 <= b_1_q0;
                b_1_load_reg_631 <= b_1_q1;
                tmp_1_reg_693 <= a_q0(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                b_1_load_2_reg_721 <= b_1_q0;
                tmp_3_reg_749 <= a_q0(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln60_15_reg_794 <= mul_ln60_15_fu_423_p2;
                sext_ln60_10_reg_782 <= sext_ln60_10_fu_416_p1;
                sext_ln60_3_reg_768 <= sext_ln60_3_fu_410_p1;
                sext_ln60_7_reg_775 <= sext_ln60_7_fu_413_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln60_3_reg_656 <= mul_ln60_3_fu_360_p2;
                mul_ln60_reg_621 <= mul_ln60_fu_322_p2;
                sext_ln60_14_reg_698 <= sext_ln60_14_fu_374_p1;
                sext_ln60_1_reg_615 <= sext_ln60_1_fu_318_p1;
                sext_ln60_4_reg_636 <= sext_ln60_4_fu_348_p1;
                sext_ln60_5_reg_643 <= sext_ln60_5_fu_352_p1;
                sext_ln60_6_reg_650 <= sext_ln60_6_fu_356_p1;
                sext_ln60_8_reg_666 <= sext_ln60_8_fu_366_p1;
                sext_ln60_reg_610 <= sext_ln60_fu_314_p1;
                tmp1_reg_626 <= a_q1(15 downto 8);
                trunc_ln60_1_reg_688 <= trunc_ln60_1_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln60_6_reg_716 <= mul_ln60_6_fu_382_p2;
                mul_ln60_9_reg_739 <= mul_ln60_9_fu_394_p2;
                sext_ln60_11_reg_726 <= sext_ln60_11_fu_387_p1;
                sext_ln60_12_reg_733 <= sext_ln60_12_fu_391_p1;
                sext_ln60_17_reg_754 <= sext_ln60_17_fu_403_p1;
                sext_ln60_9_reg_710 <= sext_ln60_9_fu_378_p1;
                trunc_ln60_2_reg_744 <= trunc_ln60_2_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sext_ln60_15_reg_826 <= sext_ln60_15_fu_430_p1;
                sext_ln60_16_reg_836 <= sext_ln60_16_fu_438_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to2 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                a_address0 <= "XX";
            end if;
        else 
            a_address0 <= "XX";
        end if; 
    end process;

    a_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_0_address0 <= "XX";
            end if;
        else 
            b_0_address0 <= "XX";
        end if; 
    end process;

    b_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_1_address0 <= "XX";
            end if;
        else 
            b_1_address0 <= "XX";
        end if; 
    end process;

    b_1_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_2_address0 <= "XX";
            end if;
        else 
            b_2_address0 <= "XX";
        end if; 
    end process;

    b_2_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_300_p4 <= a_q0(23 downto 16);
    grp_fu_450_p0 <= sext_ln60_5_fu_352_p1(8 - 1 downto 0);
    grp_fu_450_p1 <= sext_ln60_4_fu_348_p1(8 - 1 downto 0);
    grp_fu_457_p0 <= sext_ln60_8_fu_366_p1(8 - 1 downto 0);
    grp_fu_457_p1 <= sext_ln60_4_fu_348_p1(8 - 1 downto 0);
    grp_fu_464_p0 <= sext_ln60_14_fu_374_p1(8 - 1 downto 0);
    grp_fu_464_p1 <= sext_ln60_5_fu_352_p1(8 - 1 downto 0);
    grp_fu_471_p0 <= sext_ln60_14_fu_374_p1(8 - 1 downto 0);
    grp_fu_471_p1 <= sext_ln60_8_fu_366_p1(8 - 1 downto 0);
    grp_fu_479_p0 <= sext_ln60_11_fu_387_p1(8 - 1 downto 0);
    grp_fu_479_p1 <= sext_ln60_4_reg_636(8 - 1 downto 0);
    grp_fu_485_p0 <= sext_ln60_14_reg_698(8 - 1 downto 0);
    grp_fu_485_p1 <= sext_ln60_11_fu_387_p1(8 - 1 downto 0);
    grp_fu_491_p0 <= sext_ln60_17_fu_403_p1(8 - 1 downto 0);
    grp_fu_491_p1 <= sext_ln60_5_reg_643(8 - 1 downto 0);
    grp_fu_498_p0 <= sext_ln60_17_fu_403_p1(8 - 1 downto 0);
    grp_fu_498_p1 <= sext_ln60_8_reg_666(8 - 1 downto 0);
    grp_fu_505_p1 <= sext_ln60_2_fu_407_p1(8 - 1 downto 0);
    grp_fu_513_p1 <= sext_ln60_2_fu_407_p1(8 - 1 downto 0);
    grp_fu_521_p1 <= sext_ln60_2_fu_407_p1(8 - 1 downto 0);
    grp_fu_529_p0 <= sext_ln60_17_reg_754(8 - 1 downto 0);
    grp_fu_529_p1 <= sext_ln60_11_reg_726(8 - 1 downto 0);
    grp_fu_535_p0 <= sext_ln60_13_fu_427_p1(8 - 1 downto 0);
    grp_fu_535_p1 <= sext_ln60_3_reg_768(8 - 1 downto 0);
    grp_fu_542_p0 <= sext_ln60_13_fu_427_p1(8 - 1 downto 0);
    grp_fu_542_p1 <= sext_ln60_7_reg_775(8 - 1 downto 0);
    grp_fu_548_p0 <= sext_ln60_13_fu_427_p1(8 - 1 downto 0);
    grp_fu_548_p1 <= sext_ln60_10_reg_782(8 - 1 downto 0);
    grp_fu_554_p1 <= sext_ln60_3_reg_768(8 - 1 downto 0);
    grp_fu_560_p0 <= sext_ln60_16_reg_836(8 - 1 downto 0);
    grp_fu_560_p1 <= sext_ln60_7_reg_775(8 - 1 downto 0);
    grp_fu_565_p0 <= sext_ln60_16_reg_836(8 - 1 downto 0);
    grp_fu_565_p1 <= sext_ln60_10_reg_782(8 - 1 downto 0);
    mul_ln60_12_fu_419_p0 <= sext_ln60_12_reg_733(8 - 1 downto 0);
    mul_ln60_12_fu_419_p1 <= sext_ln60_6_reg_650(8 - 1 downto 0);
    mul_ln60_15_fu_423_p0 <= sext_ln60_12_reg_733(8 - 1 downto 0);
    mul_ln60_15_fu_423_p1 <= sext_ln60_9_reg_710(8 - 1 downto 0);
    mul_ln60_18_fu_433_p0 <= sext_ln60_15_fu_430_p1(8 - 1 downto 0);
    mul_ln60_18_fu_433_p1 <= sext_ln60_1_reg_615(8 - 1 downto 0);
    mul_ln60_21_fu_441_p0 <= sext_ln60_15_fu_430_p1(8 - 1 downto 0);
    mul_ln60_21_fu_441_p1 <= sext_ln60_6_reg_650(8 - 1 downto 0);
    mul_ln60_24_fu_446_p0 <= sext_ln60_15_reg_826(8 - 1 downto 0);
    mul_ln60_24_fu_446_p1 <= sext_ln60_9_reg_710(8 - 1 downto 0);
    mul_ln60_3_fu_360_p1 <= sext_ln60_fu_314_p1(8 - 1 downto 0);
    mul_ln60_6_fu_382_p1 <= sext_ln60_reg_610(8 - 1 downto 0);
    mul_ln60_9_fu_394_p1 <= sext_ln60_1_reg_615(8 - 1 downto 0);
    mul_ln60_fu_322_p1 <= sext_ln60_fu_314_p1(8 - 1 downto 0);

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                res_address1 <= "XXXX";
            end if;
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add_ln60_5_reg_873, add_ln60_9_reg_883, add_ln60_13_reg_893, add_ln60_17_reg_903, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, grp_fu_513_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d0 <= add_ln60_17_reg_903;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_d0 <= add_ln60_13_reg_893;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_d0 <= add_ln60_9_reg_883;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_d0 <= add_ln60_5_reg_873;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_d0 <= grp_fu_513_p3;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_d1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add_ln60_11_reg_888, add_ln60_15_reg_898, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, grp_fu_505_p3, grp_fu_535_p3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_d1 <= add_ln60_15_reg_898;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_d1 <= add_ln60_11_reg_888;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                res_d1 <= grp_fu_535_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_d1 <= grp_fu_505_p3;
            else 
                res_d1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            res_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_we1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln60_10_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_load_2_reg_721),16));

        sext_ln60_11_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q0),16));

        sext_ln60_12_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_1_reg_688),16));

        sext_ln60_13_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_693),16));

        sext_ln60_14_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_300_p4),16));

        sext_ln60_15_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_2_reg_744),16));

        sext_ln60_16_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_749),16));

        sext_ln60_17_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_300_p4),16));

        sext_ln60_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q1),16));

        sext_ln60_2_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_626),16));

        sext_ln60_3_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_load_reg_631),16));

        sext_ln60_4_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_338_p4),16));

        sext_ln60_5_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q1),16));

        sext_ln60_6_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q0),16));

        sext_ln60_7_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_load_1_reg_661),16));

        sext_ln60_8_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q0),16));

        sext_ln60_9_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q0),16));

        sext_ln60_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_fu_310_p1),16));

    tmp_s_fu_338_p4 <= a_q1(23 downto 16);
    trunc_ln60_1_fu_370_p1 <= a_q0(8 - 1 downto 0);
    trunc_ln60_2_fu_399_p1 <= a_q0(8 - 1 downto 0);
    trunc_ln60_fu_310_p1 <= a_q1(8 - 1 downto 0);
end behav;
