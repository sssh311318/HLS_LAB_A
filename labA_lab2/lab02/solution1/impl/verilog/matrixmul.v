// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=13.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.862000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=375,HLS_SYN_LUT=477,HLS_VERSION=2022_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_dout,
        a_empty_n,
        a_read,
        b_dout,
        b_empty_n,
        b_read,
        res_din,
        res_full_n,
        res_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] a_dout;
input   a_empty_n;
output   a_read;
input  [23:0] b_dout;
input   b_empty_n;
output   b_read;
output  [15:0] res_din;
input   res_full_n;
output   res_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_read;
reg b_read;
reg res_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln63_fu_399_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln70_fu_289_p2;
wire   [0:0] select_ln58_1_fu_340_p3;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_pp0_stage0_11001;
reg    a_blk_n;
wire    ap_block_pp0_stage0;
reg    b_blk_n;
reg    res_blk_n;
reg   [1:0] add_ln6310_reg_176;
reg   [0:0] icmp_ln659_reg_190;
reg   [0:0] cmp148_reg_204;
reg   [1:0] j4_reg_218;
reg   [1:0] i3_reg_232;
reg   [3:0] indvar_flatten2_reg_246;
wire   [1:0] i_fu_274_p3;
reg   [1:0] i_reg_478;
wire   [3:0] add_ln63_1_fu_295_p2;
reg   [3:0] add_ln63_1_reg_486;
reg   [1:0] b_copy_addr_reg_491;
reg   [1:0] b_copy_addr_reg_491_pp0_iter1_reg;
reg   [1:0] b_copy_addr_reg_491_pp0_iter2_reg;
reg   [1:0] b_copy_1_addr_reg_496;
reg   [1:0] b_copy_1_addr_reg_496_pp0_iter1_reg;
reg   [1:0] b_copy_2_addr_reg_501;
wire   [1:0] j_fu_375_p2;
reg   [1:0] j_reg_509;
wire   [0:0] cmp14_fu_381_p2;
reg   [0:0] cmp14_reg_514;
wire   [0:0] icmp_ln65_fu_387_p2;
reg   [0:0] icmp_ln65_reg_519;
wire   [1:0] add_ln63_fu_393_p2;
reg   [1:0] add_ln63_reg_524;
reg   [0:0] icmp_ln63_reg_529;
reg   [0:0] icmp_ln63_reg_529_pp0_iter1_reg;
reg   [0:0] icmp_ln63_reg_529_pp0_iter2_reg;
reg   [0:0] icmp_ln63_reg_529_pp0_iter3_reg;
reg   [0:0] icmp_ln63_reg_529_pp0_iter4_reg;
reg   [0:0] icmp_ln63_reg_529_pp0_iter5_reg;
reg  signed [7:0] a_row_load_reg_533;
reg   [7:0] a_row_1_load_reg_538;
reg  signed [7:0] a_row_1_load_reg_538_pp0_iter2_reg;
reg   [7:0] a_row_2_load_reg_543;
reg   [7:0] a_row_2_load_reg_543_pp0_iter2_reg;
reg  signed [7:0] a_row_2_load_reg_543_pp0_iter3_reg;
wire  signed [15:0] mul_ln82_fu_435_p2;
wire   [15:0] grp_fu_443_p3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [1:0] b_copy_address0;
reg    b_copy_ce0;
reg    b_copy_we0;
wire   [7:0] b_copy_d0;
reg    b_copy_ce1;
wire  signed [7:0] b_copy_q1;
wire   [1:0] b_copy_1_address0;
reg    b_copy_1_ce0;
reg    b_copy_1_we0;
wire   [7:0] b_copy_1_d0;
reg    b_copy_1_ce1;
wire  signed [7:0] b_copy_1_q1;
wire   [1:0] b_copy_2_address0;
reg    b_copy_2_ce0;
reg    b_copy_2_we0;
wire   [7:0] b_copy_2_d0;
reg    b_copy_2_ce1;
wire  signed [7:0] b_copy_2_q1;
reg   [1:0] ap_phi_mux_add_ln6310_phi_fu_180_p6;
reg   [0:0] ap_phi_mux_icmp_ln659_phi_fu_194_p6;
reg   [0:0] ap_phi_mux_cmp148_phi_fu_208_p6;
reg   [1:0] ap_phi_mux_j4_phi_fu_222_p6;
reg   [1:0] ap_phi_mux_i3_phi_fu_236_p6;
reg   [3:0] ap_phi_mux_indvar_flatten2_phi_fu_250_p6;
wire   [63:0] zext_ln65_fu_282_p1;
reg   [7:0] a_row_fu_70;
reg   [7:0] a_row_1_fu_74;
reg   [7:0] a_row_2_fu_78;
wire   [7:0] a_row_3_fu_301_p1;
wire   [15:0] grp_fu_451_p3;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] select_ln58_fu_260_p3;
wire   [0:0] cmp14_mid1_fu_268_p2;
reg    grp_fu_443_ce;
reg    grp_fu_451_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_221;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

matrixmul_b_copy_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
b_copy_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_copy_address0),
    .ce0(b_copy_ce0),
    .we0(b_copy_we0),
    .d0(b_copy_d0),
    .address1(b_copy_addr_reg_491_pp0_iter2_reg),
    .ce1(b_copy_ce1),
    .q1(b_copy_q1)
);

matrixmul_b_copy_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
b_copy_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_copy_1_address0),
    .ce0(b_copy_1_ce0),
    .we0(b_copy_1_we0),
    .d0(b_copy_1_d0),
    .address1(b_copy_1_addr_reg_496_pp0_iter1_reg),
    .ce1(b_copy_1_ce1),
    .q1(b_copy_1_q1)
);

matrixmul_b_copy_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
b_copy_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_copy_2_address0),
    .ce0(b_copy_2_ce0),
    .we0(b_copy_2_we0),
    .d0(b_copy_2_d0),
    .address1(b_copy_2_addr_reg_501),
    .ce1(b_copy_2_ce1),
    .q1(b_copy_2_q1)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(b_copy_q1),
    .din1(a_row_2_load_reg_543_pp0_iter3_reg),
    .dout(mul_ln82_fu_435_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_copy_2_q1),
    .din1(a_row_load_reg_533),
    .din2(mul_ln82_fu_435_p2),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p3)
);

matrixmul_mac_muladd_8s_8s_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16ns_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_copy_1_q1),
    .din1(a_row_1_load_reg_538_pp0_iter2_reg),
    .din2(grp_fu_443_p3),
    .ce(grp_fu_451_ce),
    .dout(grp_fu_451_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        add_ln6310_reg_176 <= add_ln63_reg_524;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        add_ln6310_reg_176 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        cmp148_reg_204 <= cmp14_reg_514;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cmp148_reg_204 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        i3_reg_232 <= i_reg_478;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i3_reg_232 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        icmp_ln659_reg_190 <= icmp_ln65_reg_519;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        icmp_ln659_reg_190 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        indvar_flatten2_reg_246 <= add_ln63_1_reg_486;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_246 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd0))) begin
        j4_reg_218 <= j_reg_509;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_529 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        j4_reg_218 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_289_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_1_fu_74 <= {{a_dout[15:8]}};
        a_row_2_fu_78 <= a_row_3_fu_301_p1;
        a_row_fu_70 <= {{a_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_row_1_load_reg_538 <= a_row_1_fu_74;
        a_row_2_load_reg_543 <= a_row_2_fu_78;
        a_row_load_reg_533 <= a_row_fu_70;
        b_copy_1_addr_reg_496 <= zext_ln65_fu_282_p1;
        b_copy_1_addr_reg_496_pp0_iter1_reg <= b_copy_1_addr_reg_496;
        b_copy_2_addr_reg_501 <= zext_ln65_fu_282_p1;
        b_copy_addr_reg_491 <= zext_ln65_fu_282_p1;
        b_copy_addr_reg_491_pp0_iter1_reg <= b_copy_addr_reg_491;
        icmp_ln63_reg_529 <= icmp_ln63_fu_399_p2;
        icmp_ln63_reg_529_pp0_iter1_reg <= icmp_ln63_reg_529;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_row_1_load_reg_538_pp0_iter2_reg <= a_row_1_load_reg_538;
        a_row_2_load_reg_543_pp0_iter2_reg <= a_row_2_load_reg_543;
        a_row_2_load_reg_543_pp0_iter3_reg <= a_row_2_load_reg_543_pp0_iter2_reg;
        b_copy_addr_reg_491_pp0_iter2_reg <= b_copy_addr_reg_491_pp0_iter1_reg;
        icmp_ln63_reg_529_pp0_iter2_reg <= icmp_ln63_reg_529_pp0_iter1_reg;
        icmp_ln63_reg_529_pp0_iter3_reg <= icmp_ln63_reg_529_pp0_iter2_reg;
        icmp_ln63_reg_529_pp0_iter4_reg <= icmp_ln63_reg_529_pp0_iter3_reg;
        icmp_ln63_reg_529_pp0_iter5_reg <= icmp_ln63_reg_529_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln63_1_reg_486 <= add_ln63_1_fu_295_p2;
        add_ln63_reg_524 <= add_ln63_fu_393_p2;
        cmp14_reg_514 <= cmp14_fu_381_p2;
        i_reg_478 <= i_fu_274_p3;
        icmp_ln65_reg_519 <= icmp_ln65_fu_387_p2;
        j_reg_509 <= j_fu_375_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln70_fu_289_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_blk_n = a_empty_n;
    end else begin
        a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_289_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_read = 1'b1;
    end else begin
        a_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln63_reg_529_pp0_iter5_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_add_ln6310_phi_fu_180_p6 = 2'd1;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_add_ln6310_phi_fu_180_p6 = add_ln63_reg_524;
        end else begin
            ap_phi_mux_add_ln6310_phi_fu_180_p6 = add_ln6310_reg_176;
        end
    end else begin
        ap_phi_mux_add_ln6310_phi_fu_180_p6 = add_ln6310_reg_176;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_cmp148_phi_fu_208_p6 = 1'd1;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_cmp148_phi_fu_208_p6 = cmp14_reg_514;
        end else begin
            ap_phi_mux_cmp148_phi_fu_208_p6 = cmp148_reg_204;
        end
    end else begin
        ap_phi_mux_cmp148_phi_fu_208_p6 = cmp148_reg_204;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_i3_phi_fu_236_p6 = 2'd0;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_i3_phi_fu_236_p6 = i_reg_478;
        end else begin
            ap_phi_mux_i3_phi_fu_236_p6 = i3_reg_232;
        end
    end else begin
        ap_phi_mux_i3_phi_fu_236_p6 = i3_reg_232;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_icmp_ln659_phi_fu_194_p6 = 1'd0;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_icmp_ln659_phi_fu_194_p6 = icmp_ln65_reg_519;
        end else begin
            ap_phi_mux_icmp_ln659_phi_fu_194_p6 = icmp_ln659_reg_190;
        end
    end else begin
        ap_phi_mux_icmp_ln659_phi_fu_194_p6 = icmp_ln659_reg_190;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_250_p6 = 4'd0;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_250_p6 = add_ln63_1_reg_486;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_250_p6 = indvar_flatten2_reg_246;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_250_p6 = indvar_flatten2_reg_246;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((icmp_ln63_reg_529 == 1'd1)) begin
            ap_phi_mux_j4_phi_fu_222_p6 = 2'd0;
        end else if ((icmp_ln63_reg_529 == 1'd0)) begin
            ap_phi_mux_j4_phi_fu_222_p6 = j_reg_509;
        end else begin
            ap_phi_mux_j4_phi_fu_222_p6 = j4_reg_218;
        end
    end else begin
        ap_phi_mux_j4_phi_fu_222_p6 = j4_reg_218;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (icmp_ln63_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln58_1_fu_340_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_1_ce0 = 1'b1;
    end else begin
        b_copy_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        b_copy_1_ce1 = 1'b1;
    end else begin
        b_copy_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln58_1_fu_340_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_1_we0 = 1'b1;
    end else begin
        b_copy_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_2_ce0 = 1'b1;
    end else begin
        b_copy_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_copy_2_ce1 = 1'b1;
    end else begin
        b_copy_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln58_1_fu_340_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_2_we0 = 1'b1;
    end else begin
        b_copy_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_ce0 = 1'b1;
    end else begin
        b_copy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        b_copy_ce1 = 1'b1;
    end else begin
        b_copy_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln58_1_fu_340_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_copy_we0 = 1'b1;
    end else begin
        b_copy_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln58_1_fu_340_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_451_ce = 1'b1;
    end else begin
        grp_fu_451_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_blk_n = res_full_n;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_write = 1'b1;
    end else begin
        res_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_row_3_fu_301_p1 = a_dout[7:0];

assign add_ln63_1_fu_295_p2 = (ap_phi_mux_indvar_flatten2_phi_fu_250_p6 + 4'd1);

assign add_ln63_fu_393_p2 = (i_fu_274_p3 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (res_full_n == 1'b0)) | ((ap_start == 1'b1) & (((select_ln58_1_fu_340_p3 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_fu_289_p2 == 1'd1) & (1'b0 == a_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & (res_full_n == 1'b0)) | ((ap_start == 1'b1) & (((select_ln58_1_fu_340_p3 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_fu_289_p2 == 1'd1) & (1'b0 == a_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & (res_full_n == 1'b0)) | ((ap_start == 1'b1) & (((select_ln58_1_fu_340_p3 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_fu_289_p2 == 1'd1) & (1'b0 == a_empty_n)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((select_ln58_1_fu_340_p3 == 1'd1) & (b_empty_n == 1'b0)) | ((icmp_ln70_fu_289_p2 == 1'd1) & (1'b0 == a_empty_n)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = (res_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_221 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign b_copy_1_address0 = zext_ln65_fu_282_p1;

assign b_copy_1_d0 = {{b_dout[15:8]}};

assign b_copy_2_address0 = zext_ln65_fu_282_p1;

assign b_copy_2_d0 = {{b_dout[23:16]}};

assign b_copy_address0 = zext_ln65_fu_282_p1;

assign b_copy_d0 = b_dout[7:0];

assign cmp14_fu_381_p2 = ((i_fu_274_p3 == 2'd0) ? 1'b1 : 1'b0);

assign cmp14_mid1_fu_268_p2 = ((ap_phi_mux_add_ln6310_phi_fu_180_p6 == 2'd0) ? 1'b1 : 1'b0);

assign i_fu_274_p3 = ((ap_phi_mux_icmp_ln659_phi_fu_194_p6[0:0] == 1'b1) ? ap_phi_mux_add_ln6310_phi_fu_180_p6 : ap_phi_mux_i3_phi_fu_236_p6);

assign icmp_ln63_fu_399_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_250_p6 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_387_p2 = ((j_fu_375_p2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_289_p2 = ((select_ln58_fu_260_p3 == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_375_p2 = (select_ln58_fu_260_p3 + 2'd1);

assign res_din = grp_fu_451_p3;

assign select_ln58_1_fu_340_p3 = ((ap_phi_mux_icmp_ln659_phi_fu_194_p6[0:0] == 1'b1) ? cmp14_mid1_fu_268_p2 : ap_phi_mux_cmp148_phi_fu_208_p6);

assign select_ln58_fu_260_p3 = ((ap_phi_mux_icmp_ln659_phi_fu_194_p6[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_j4_phi_fu_222_p6);

assign zext_ln65_fu_282_p1 = select_ln58_fu_260_p3;

endmodule //matrixmul
