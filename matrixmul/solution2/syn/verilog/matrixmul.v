// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=13.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.718000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=114,HLS_SYN_LUT=238,HLS_VERSION=2022_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] sub_ln60_fu_112_p2;
reg   [3:0] sub_ln60_reg_177;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln54_fu_124_p2;
reg   [1:0] add_ln54_reg_186;
reg   [3:0] res_addr_reg_191;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln56_fu_150_p2;
reg   [1:0] add_ln56_reg_199;
wire    grp_matrixmul_Pipeline_Product_fu_80_ap_start;
wire    grp_matrixmul_Pipeline_Product_fu_80_ap_done;
wire    grp_matrixmul_Pipeline_Product_fu_80_ap_idle;
wire    grp_matrixmul_Pipeline_Product_fu_80_ap_ready;
wire   [3:0] grp_matrixmul_Pipeline_Product_fu_80_a_address0;
wire    grp_matrixmul_Pipeline_Product_fu_80_a_ce0;
wire   [3:0] grp_matrixmul_Pipeline_Product_fu_80_b_address0;
wire    grp_matrixmul_Pipeline_Product_fu_80_b_ce0;
wire   [15:0] grp_matrixmul_Pipeline_Product_fu_80_p_out;
wire    grp_matrixmul_Pipeline_Product_fu_80_p_out_ap_vld;
reg   [1:0] j_reg_68;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln54_fu_118_p2;
reg    grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg;
wire   [0:0] icmp_ln56_fu_144_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln57_1_fu_139_p1;
reg   [1:0] i_fu_48;
wire   [3:0] tmp_fu_104_p3;
wire   [3:0] zext_ln60_fu_100_p1;
wire   [3:0] zext_ln57_fu_130_p1;
wire   [3:0] add_ln57_fu_134_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg = 1'b0;
end

matrixmul_matrixmul_Pipeline_Product grp_matrixmul_Pipeline_Product_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixmul_Pipeline_Product_fu_80_ap_start),
    .ap_done(grp_matrixmul_Pipeline_Product_fu_80_ap_done),
    .ap_idle(grp_matrixmul_Pipeline_Product_fu_80_ap_idle),
    .ap_ready(grp_matrixmul_Pipeline_Product_fu_80_ap_ready),
    .sub_ln60(sub_ln60_reg_177),
    .a_address0(grp_matrixmul_Pipeline_Product_fu_80_a_address0),
    .a_ce0(grp_matrixmul_Pipeline_Product_fu_80_a_ce0),
    .a_q0(a_q0),
    .zext_ln56(j_reg_68),
    .b_address0(grp_matrixmul_Pipeline_Product_fu_80_b_address0),
    .b_ce0(grp_matrixmul_Pipeline_Product_fu_80_b_ce0),
    .b_q0(b_q0),
    .p_out(grp_matrixmul_Pipeline_Product_fu_80_p_out),
    .p_out_ap_vld(grp_matrixmul_Pipeline_Product_fu_80_p_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln56_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_Pipeline_Product_fu_80_ap_ready == 1'b1)) begin
            grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_48 <= 2'd0;
    end else if (((icmp_ln56_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_48 <= add_ln54_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_68 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_68 <= add_ln56_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln54_reg_186 <= add_ln54_fu_124_p2;
        sub_ln60_reg_177 <= sub_ln60_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln56_reg_199 <= add_ln56_fu_150_p2;
        res_addr_reg_191 <= zext_ln57_1_fu_139_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_matrixmul_Pipeline_Product_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln54_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln54_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln56_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_matrixmul_Pipeline_Product_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = grp_matrixmul_Pipeline_Product_fu_80_a_address0;

assign a_ce0 = grp_matrixmul_Pipeline_Product_fu_80_a_ce0;

assign add_ln54_fu_124_p2 = (i_fu_48 + 2'd1);

assign add_ln56_fu_150_p2 = (j_reg_68 + 2'd1);

assign add_ln57_fu_134_p2 = (sub_ln60_reg_177 + zext_ln57_fu_130_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign b_address0 = grp_matrixmul_Pipeline_Product_fu_80_b_address0;

assign b_ce0 = grp_matrixmul_Pipeline_Product_fu_80_b_ce0;

assign grp_matrixmul_Pipeline_Product_fu_80_ap_start = grp_matrixmul_Pipeline_Product_fu_80_ap_start_reg;

assign icmp_ln54_fu_118_p2 = ((i_fu_48 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_144_p2 = ((j_reg_68 == 2'd3) ? 1'b1 : 1'b0);

assign res_address0 = res_addr_reg_191;

assign res_d0 = grp_matrixmul_Pipeline_Product_fu_80_p_out;

assign sub_ln60_fu_112_p2 = (tmp_fu_104_p3 - zext_ln60_fu_100_p1);

assign tmp_fu_104_p3 = {{i_fu_48}, {2'd0}};

assign zext_ln57_1_fu_139_p1 = add_ln57_fu_134_p2;

assign zext_ln57_fu_130_p1 = j_reg_68;

assign zext_ln60_fu_100_p1 = i_fu_48;

endmodule //matrixmul
